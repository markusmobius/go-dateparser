package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"os"
)

func generateCode(tplName string, data interface{}, dstPath string) error {
	// Generate code
	b := bytes.NewBuffer(nil)
	err := templates[tplName].Execute(b, data)
	if err != nil {
		return err
	}

	// Format code
	code, err := format.Source(b.Bytes())
	if err != nil {
		return err
	}

	// Save to file
	return ioutil.WriteFile(dstPath, code, os.ModePerm)
}

func generateLocaleDataCode(dstPath string, listData []LocaleData) error {
	// Generate code
	b := bytes.NewBuffer(nil)
	b.WriteString(`
	// Code is generated by script; DO NOT EDIT.

	package data
	import "github.com/markusmobius/go-dateparser/internal/regexp"
	`)

	// Generate locale data
	err := templates["locale-data"].Execute(b, &listData)
	if err != nil {
		return err
	}

	// Remove empty fields
	code := b.Bytes()
	code = rxGoEmptyField.ReplaceAll(code, []byte(""))
	code = rxGoZeroField.ReplaceAll(code, []byte(""))

	// Format code
	code, err = format.Source(code)
	if err != nil {
		return err
	}

	nRegex := bytes.Count(code, []byte("regexp"))
	if nRegex <= 1 {
		code = rxGoRegexImport.ReplaceAll(code, []byte(""))
	}

	// Save to file
	return ioutil.WriteFile(dstPath, code, os.ModePerm)
}
