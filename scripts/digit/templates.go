package main

import "text/template"

var tpl = template.Must(template.New("").Parse(codeTemplate))

const codeTemplate = `
// Code is generated by scripts/digit; DO NOT EDIT.

package digit

import (
	"unicode"
)

// NormalizeString converts non latin digit to its latin counterpart.
// For example, 'ูก' will be converted into '1'.
func NormalizeString(str string) string {
	lastUsedRange := -1
	runes := []rune(str)
	for i, r := range runes {
		// If it's not digit, don't change it
		if !unicode.IsDigit(r) {
			continue
		}

		// If we previously already used a range, try to use it again
		if lastUsedRange > 0 {
			if number, ok := allDigitRanges[lastUsedRange].apply(r); ok {
				runes[i] = number
				continue
			}
		}

		// If not, try every digit range
		for j := range allDigitRanges {
			if number, ok := allDigitRanges[j].apply(r); ok {
				runes[i] = number
				lastUsedRange = j
				break
			}
		}
	}

	return string(runes)
}

type digitRange struct {
	Start rune
	End   rune
}

func (dr digitRange) apply(r rune) (rune, bool) {
	if r >= dr.Start && r <= dr.End {
		number := int32(r - dr.Start)
		return '0' + number, true
	}

	return r, false
}

var allDigitRanges = []digitRange{
	{{range $data := . -}}
	{'{{$data.Start}}', '{{$data.End}}'}, // {{$data.Name}}
	{{end -}}
}
`
