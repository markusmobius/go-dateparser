// Code is generated by script; DO NOT EDIT.

package data

import "github.com/markusmobius/go-dateparser/internal/regexp"

var (
	lb_Locale LocaleData
)

func init() {
	lb_Locale = merge(nil, LocaleData{
		Name:      "lb",
		DateOrder: "DMY",
		Charset:   []rune(`bcdefghijklnorstuvwzäéë`),
		Translations: map[string][]string{
			"donneschdeg": {"thursday"},
			"denschdeg":   {"tuesday"},
			"samschdeg":   {"saturday"},
			"september":   {"september"},
			"dezember":    {"december"},
			"mettwoch":    {"wednesday"},
			"nomettes":    {"pm"},
			"november":    {"november"},
			"februar":     {"february"},
			"freideg":     {"friday"},
			"meindeg":     {"monday"},
			"oktober":     {"october"},
			"sonndeg":     {"sunday"},
			"abrell":      {"april"},
			"august":      {"august"},
			"januar":      {"january"},
			"minutt":      {"minute"},
			"sekonn":      {"second"},
			"maerz":       {"march"},
			"moies":       {"am"},
			"mount":       {"month"},
			"stonn":       {"hour"},
			"joer":        {"year"},
			"juli":        {"july"},
			"juni":        {"june"},
			"woch":        {"week"},
			"abr":         {"april"},
			"aug":         {"august"},
			"dag":         {"day"},
			"den":         {"tuesday"},
			"dez":         {"december"},
			"don":         {"thursday"},
			"feb":         {"february"},
			"fre":         {"friday"},
			"gmt":         {"gmt"},
			"jan":         {"january"},
			"jul":         {"july"},
			"jun":         {"june"},
			"mae":         {"march"},
			"mee":         {"may"},
			"mei":         {"monday"},
			"met":         {"wednesday"},
			"min":         {"minute"},
			"nov":         {"november"},
			"okt":         {"october"},
			"sam":         {"saturday"},
			"sek":         {"second"},
			"sep":         {"september"},
			"son":         {"sunday"},
			"utc":         {"utc"},
			"am":          {"am"},
			"pm":          {"pm"},
			"st":          {"hour"},
			" ":           {" "},
			"'":           {""},
			"+":           {"+"},
			",":           {""},
			"-":           {"-"},
			".":           {"."},
			"/":           {"/"},
			":":           {":"},
			";":           {""},
			"@":           {""},
			"[":           {""},
			"]":           {""},
			"d":           {"day"},
			"j":           {"year"},
			"m":           {"month"},
			"w":           {"week"},
			"z":           {"z"},
			"|":           {""},
		},
		RelativeType: map[string]string{
			"leschte mount": "1 month ago",
			"nachste mount": "in 1 month",
			"lescht joer":   "1 year ago",
			"lescht woch":   "1 week ago",
			"nachst joer":   "in 1 year",
			"nachst woch":   "in 1 week",
			"this minute":   "0 minute ago",
			"dese mount":    "0 month ago",
			"dest joer":     "0 year ago",
			"this hour":     "0 hour ago",
			"des woch":      "0 week ago",
			"geschter":      "1 day ago",
			"haut":          "0 day ago",
			"muer":          "in 1 day",
			"now":           "0 second ago",
		},
		RelativeTypeRegexes: []ReplacementData{
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) minutt`), "$1 minute ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) sekonn`), "$1 second ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) mount`), "$1 month ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) stonn`), "$1 hour ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) joer`), "$1 year ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) woch`), "$1 week ago"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) minutt`), "in $1 minute"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) sekonn`), "in $1 second"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) dag`), "$1 day ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) min`), "$1 minute ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) sek`), "$1 second ago"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) mount`), "in $1 month"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) stonn`), "in $1 hour"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) st`), "$1 hour ago"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) joer`), "in $1 year"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) woch`), "in $1 week"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) d`), "$1 day ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) j`), "$1 year ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) m`), "$1 month ago"},
			{regexp.MustCompile(`(?i)virun (\d+[.,]?\d*) w`), "$1 week ago"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) dag`), "in $1 day"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) min`), "in $1 minute"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) sek`), "in $1 second"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) st`), "in $1 hour"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) d`), "in $1 day"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) j`), "in $1 year"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) m`), "in $1 month"},
			{regexp.MustCompile(`(?i)an (\d+[.,]?\d*) w`), "in $1 week"},
		},
		RxCombined:      regexp.MustCompile(`(?i)(\A|[^\pL\pM\d]|_)(virun \d+[.,]?\d* minutt|virun \d+[.,]?\d* sekonn|virun \d+[.,]?\d* mount|virun \d+[.,]?\d* stonn|virun \d+[.,]?\d* joer|virun \d+[.,]?\d* woch|an \d+[.,]?\d* minutt|an \d+[.,]?\d* sekonn|virun \d+[.,]?\d* dag|virun \d+[.,]?\d* min|virun \d+[.,]?\d* sek|an \d+[.,]?\d* mount|an \d+[.,]?\d* stonn|virun \d+[.,]?\d* st|an \d+[.,]?\d* joer|an \d+[.,]?\d* woch|virun \d+[.,]?\d* d|virun \d+[.,]?\d* j|virun \d+[.,]?\d* m|virun \d+[.,]?\d* w|an \d+[.,]?\d* dag|an \d+[.,]?\d* min|an \d+[.,]?\d* sek|an \d+[.,]?\d* st|an \d+[.,]?\d* d|an \d+[.,]?\d* j|an \d+[.,]?\d* m|an \d+[.,]?\d* w)(\z|[^\pL\pM\d]|_)`),
		RxExactCombined: regexp.MustCompile(`(?i)^(virun \d+[.,]?\d* minutt|virun \d+[.,]?\d* sekonn|virun \d+[.,]?\d* mount|virun \d+[.,]?\d* stonn|virun \d+[.,]?\d* joer|virun \d+[.,]?\d* woch|an \d+[.,]?\d* minutt|an \d+[.,]?\d* sekonn|virun \d+[.,]?\d* dag|virun \d+[.,]?\d* min|virun \d+[.,]?\d* sek|an \d+[.,]?\d* mount|an \d+[.,]?\d* stonn|virun \d+[.,]?\d* st|an \d+[.,]?\d* joer|an \d+[.,]?\d* woch|virun \d+[.,]?\d* d|virun \d+[.,]?\d* j|virun \d+[.,]?\d* m|virun \d+[.,]?\d* w|an \d+[.,]?\d* dag|an \d+[.,]?\d* min|an \d+[.,]?\d* sek|an \d+[.,]?\d* st|an \d+[.,]?\d* d|an \d+[.,]?\d* j|an \d+[.,]?\d* m|an \d+[.,]?\d* w)$`),
		KnownWords:      []string{"leschte mount", "nachste mount", "donneschdeg", "lescht joer", "lescht woch", "nachst joer", "nachst woch", "this minute", "dese mount", "denschdeg", "dest joer", "samschdeg", "september", "this hour", "des woch", "dezember", "geschter", "mettwoch", "nomettes", "november", "februar", "freideg", "meindeg", "oktober", "sonndeg", "abrell", "august", "januar", "minutt", "sekonn", "maerz", "moies", "mount", "stonn", "haut", "joer", "juli", "juni", "muer", "woch", "abr", "aug", "dag", "den", "dez", "don", "feb", "fre", "gmt", "jan", "jul", "jun", "mae", "mee", "mei", "met", "min", "nov", "now", "okt", "sam", "sek", "sep", "son", "utc", "am", "pm", "st", " ", "'", "+", ",", "-", ".", "/", ":", ";", "@", "[", "]", "d", "j", "m", "w", "z", "|"},
	})
}
