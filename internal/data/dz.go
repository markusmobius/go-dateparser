// Code is generated by script; DO NOT EDIT.

package data

import "github.com/markusmobius/go-dateparser/internal/regexp"

var (
	dz_Locale LocaleData
)

func init() {
	dz_Locale = merge(nil, LocaleData{
		Name:      "dz",
		DateOrder: "YMD",
		Charset:   []rune(`ceghiklnorstuwxyz་༠༡༢༣༤༥༦༧༨༩ཁགངཅཆཉདནཔཕབམཙཚཝཞཟའརལསཱིེོུྐྒྔྤྱྲླྷ`),
		Translations: map[string][]string{
			"ས་ཟ་བཅ་གཅག་པ་": {"november"},
			"ས་ཟ་བཅ་གཉས་པ་": {"december"},
			"གཟའ་མག་དམར་":   {"monday"},
			"ཟ་བཅ་གཅག་པ་":   {"november"},
			"ཟ་བཅ་གཉས་པ་":   {"december"},
			"གཟའ་པ་སངས་":    {"thursday"},
			"ས་ཟ་གཉས་པ་":    {"february"},
			"ས་ཟ་གསམ་པ་":    {"march"},
			"ས་ཟ་བདན་པ་":    {"july"},
			"ས་ཟ་བརད་པ་":    {"august"},
			"གཟའ་ཕར་བ་":     {"wednesday"},
			"གཟའ་ལག་པ་":     {"tuesday"},
			"གཟའ་སན་པ་":     {"friday"},
			"ས་ཟ་དག་པ་":     {"september"},
			"ས་ཟ་བཅ་པ་":     {"october"},
			"གཟའ་ཉ་མ་":      {"saturday"},
			"གཟའ་ཟ་བ་":      {"sunday"},
			"ཟ་གཉས་པ་":      {"february"},
			"ཟ་གསམ་པ་":      {"march"},
			"ཟ་བདན་པ་":      {"july"},
			"ཟ་བརད་པ་":      {"august"},
			"ས་ཟ་དག་པ":      {"june"},
			"ས་ཟ་དངཔ་":      {"january"},
			"ས་ཟ་བཞ་པ":      {"april"},
			"ས་ཟ་ལ་པ་":      {"may"},
			"ཟ་དག་པ་":       {"september"},
			"ཟ་བཅ་པ་":       {"october"},
			"ཟ་བཞ་པ་":       {"april"},
			"བདན་ཕག":        {"week"},
			"ཟ་དག་པ":        {"june"},
			"ཟ་དངཔ་":        {"january"},
			"ཟ་ལ་པ་":        {"may"},
			"སར་ཆ་":         {"second"},
			"ཆ་ཚད":          {"hour"},
			"ཕ་ཆ་":          {"pm"},
			"ཟ་༡༠":          {"october"},
			"ཟ་༡༡":          {"november"},
			"ཟ་༡༢":          {"december"},
			"ཟ་ཝ་":          {"month"},
			"ས་ཆ་":          {"am"},
			"སངས་":          {"thursday"},
			"སར་མ":          {"minute"},
			"gmt":           {"gmt"},
			"utc":           {"utc"},
			"ཕར་":           {"wednesday"},
			"མར་":           {"monday"},
			"ཚས་":           {"day"},
			"ཟ་༡":           {"january"},
			"ཟ་༢":           {"february"},
			"ཟ་༣":           {"march"},
			"ཟ་༤":           {"april"},
			"ཟ་༥":           {"may"},
			"ཟ་༦":           {"june"},
			"ཟ་༧":           {"july"},
			"ཟ་༨":           {"august"},
			"ཟ་༩":           {"september"},
			"ལག་":           {"tuesday"},
			"སན་":           {"friday"},
			"am":            {"am"},
			"pm":            {"pm"},
			"ཉ་":            {"saturday"},
			"ཟ་":            {"sunday"},
			" ":             {" "},
			"'":             {""},
			"+":             {"+"},
			",":             {""},
			"-":             {"-"},
			".":             {"."},
			"/":             {"/"},
			":":             {":"},
			";":             {""},
			"@":             {""},
			"[":             {""},
			"]":             {""},
			"z":             {"z"},
			"|":             {""},
			"ལ":             {"year"},
		},
		RelativeType: map[string]string{
			"this minute": "0 minute ago",
			"last month":  "1 month ago",
			"next month":  "in 1 month",
			"this month":  "0 month ago",
			"last week":   "1 week ago",
			"last year":   "1 year ago",
			"next week":   "in 1 week",
			"next year":   "in 1 year",
			"this hour":   "0 hour ago",
			"this week":   "0 week ago",
			"this year":   "0 year ago",
			"ནངས་པ་":      "in 1 day",
			"ད་རས་":       "0 day ago",
			"ཁ་ཙ་":        "1 day ago",
			"now":         "0 second ago",
		},
		RelativeTypeRegexes: []ReplacementData{
			{regexp.MustCompile(`(?i)བངན་ཕག་ (\d+[.,]?\d*) ཧ་མ་`), "$1 week ago"},
			{regexp.MustCompile(`(?i)བངན་ཕག་ (\d+[.,]?\d*) ནང་`), "in $1 week"},
			{regexp.MustCompile(`(?i)ལ་འཁར་ (\d+[.,]?\d*) ཧ་མ་`), "$1 year ago"},
			{regexp.MustCompile(`(?i)ཆ་ཚད་ (\d+[.,]?\d*) ཧ་མ་`), "$1 hour ago"},
			{regexp.MustCompile(`(?i)ལ་འཁར་ (\d+[.,]?\d*) ནང་`), "in $1 year"},
			{regexp.MustCompile(`(?i)སར་ཆ་ (\d+[.,]?\d*) ཧ་མ་`), "$1 second ago"},
			{regexp.MustCompile(`(?i)སར་མ་ (\d+[.,]?\d*) ཧ་མ་`), "$1 minute ago"},
			{regexp.MustCompile(`(?i)ཆ་ཚད་ (\d+[.,]?\d*) ནང་`), "in $1 hour"},
			{regexp.MustCompile(`(?i)ཉནམ་ (\d+[.,]?\d*) ཧ་མ་`), "$1 day ago"},
			{regexp.MustCompile(`(?i)སར་ཆ་ (\d+[.,]?\d*) ནང་`), "in $1 second"},
			{regexp.MustCompile(`(?i)སར་མ་ (\d+[.,]?\d*) ནང་`), "in $1 minute"},
			{regexp.MustCompile(`(?i)ཉནམ་ (\d+[.,]?\d*) ནང་`), "in $1 day"},
			{regexp.MustCompile(`(?i)ཟཝ་ (\d+[.,]?\d*) ཧ་མ་`), "$1 month ago"},
			{regexp.MustCompile(`(?i)ཟཝ་ (\d+[.,]?\d*) ནང་`), "in $1 month"},
		},
		RxCombined:      regexp.MustCompile(`(?i)(\A|[^\pL\pM\d]|_)(བངན་ཕག་ \d+[.,]?\d* ཧ་མ་|བངན་ཕག་ \d+[.,]?\d* ནང་|ལ་འཁར་ \d+[.,]?\d* ཧ་མ་|ཆ་ཚད་ \d+[.,]?\d* ཧ་མ་|ལ་འཁར་ \d+[.,]?\d* ནང་|སར་ཆ་ \d+[.,]?\d* ཧ་མ་|སར་མ་ \d+[.,]?\d* ཧ་མ་|ཆ་ཚད་ \d+[.,]?\d* ནང་|ཉནམ་ \d+[.,]?\d* ཧ་མ་|སར་ཆ་ \d+[.,]?\d* ནང་|སར་མ་ \d+[.,]?\d* ནང་|ཉནམ་ \d+[.,]?\d* ནང་|ཟཝ་ \d+[.,]?\d* ཧ་མ་|ཟཝ་ \d+[.,]?\d* ནང་)(\z|[^\pL\pM\d]|_)`),
		RxExactCombined: regexp.MustCompile(`(?i)^(བངན་ཕག་ \d+[.,]?\d* ཧ་མ་|བངན་ཕག་ \d+[.,]?\d* ནང་|ལ་འཁར་ \d+[.,]?\d* ཧ་མ་|ཆ་ཚད་ \d+[.,]?\d* ཧ་མ་|ལ་འཁར་ \d+[.,]?\d* ནང་|སར་ཆ་ \d+[.,]?\d* ཧ་མ་|སར་མ་ \d+[.,]?\d* ཧ་མ་|ཆ་ཚད་ \d+[.,]?\d* ནང་|ཉནམ་ \d+[.,]?\d* ཧ་མ་|སར་ཆ་ \d+[.,]?\d* ནང་|སར་མ་ \d+[.,]?\d* ནང་|ཉནམ་ \d+[.,]?\d* ནང་|ཟཝ་ \d+[.,]?\d* ཧ་མ་|ཟཝ་ \d+[.,]?\d* ནང་)$`),
		KnownWords:      []string{"ས་ཟ་བཅ་གཅག་པ་", "ས་ཟ་བཅ་གཉས་པ་", "this minute", "གཟའ་མག་དམར་", "ཟ་བཅ་གཅག་པ་", "ཟ་བཅ་གཉས་པ་", "last month", "next month", "this month", "གཟའ་པ་སངས་", "ས་ཟ་གཉས་པ་", "ས་ཟ་གསམ་པ་", "ས་ཟ་བདན་པ་", "ས་ཟ་བརད་པ་", "last week", "last year", "next week", "next year", "this hour", "this week", "this year", "གཟའ་ཕར་བ་", "གཟའ་ལག་པ་", "གཟའ་སན་པ་", "ས་ཟ་དག་པ་", "ས་ཟ་བཅ་པ་", "གཟའ་ཉ་མ་", "གཟའ་ཟ་བ་", "ཟ་གཉས་པ་", "ཟ་གསམ་པ་", "ཟ་བདན་པ་", "ཟ་བརད་པ་", "ས་ཟ་དག་པ", "ས་ཟ་དངཔ་", "ས་ཟ་བཞ་པ", "ས་ཟ་ལ་པ་", "ཟ་དག་པ་", "ཟ་བཅ་པ་", "ཟ་བཞ་པ་", "ནངས་པ་", "བདན་ཕག", "ཟ་དག་པ", "ཟ་དངཔ་", "ཟ་ལ་པ་", "ད་རས་", "སར་ཆ་", "ཁ་ཙ་", "ཆ་ཚད", "ཕ་ཆ་", "ཟ་༡༠", "ཟ་༡༡", "ཟ་༡༢", "ཟ་ཝ་", "ས་ཆ་", "སངས་", "སར་མ", "gmt", "now", "utc", "ཕར་", "མར་", "ཚས་", "ཟ་༡", "ཟ་༢", "ཟ་༣", "ཟ་༤", "ཟ་༥", "ཟ་༦", "ཟ་༧", "ཟ་༨", "ཟ་༩", "ལག་", "སན་", "am", "pm", "ཉ་", "ཟ་", " ", "'", "+", ",", "-", ".", "/", ":", ";", "@", "[", "]", "z", "|", "ལ"},
	})
}
